//问题：动态分配也是死锁的必要条件。
//错选：错误
//答案：正确
//原因：干扰项，答案是比较固定的
//解析：死锁必要条件： 1.互斥条件 2.不可剥夺 3.请求与保持 4.循环等待
//知识点：



//问题：关于虚拟地址空间理解正确的是（）
//错选：进程最大可寻址的空间时：从0开始到2的CPU地址位数幂的线性空间
//答案：通过多级页表来实现虚拟空间到物理空间的映射
//原因：
//解析：
进程最大可寻址的空间：a 考虑操作系统位数； b  
//知识点：
a 虚拟空间和物理空间的映射是通过页表进行的，操作系统根据页表映射和置换算法进行操作，无一定的规律可循
b 在同一个X86兼容的主机上，如果CPU是64位的，最大虚拟空间在32位系统下是2^32字节，在64位下是2^64字节。（64位CPU情况下，可以安装64位操作系统和32位操作系统。32位CPU情况下，只能安装32位操作系统。即最大寻址空间有两类情况）
c 



//问题：设计批处理多道系统时，首先要考虑的是( )。
//错选：交互性和响应时间
//答案：系统效率和吞吐量
//原因：
//解析：
批处理（多道）系统：系统效率和吞吐量；
分时系统：交互性和响应时间；
实时系统：实时性和可靠性；
//知识点：




//问题：页表表项中的访问位由哪一个实体置位（）？
//错选：用户进程代码
//答案：CPU
//原因：
//解析：页表项中的访问位是由硬件来控制的
//知识点：




//问题：在单处理机系统中，相同的硬件条件下，要执行10个程序，每个程序单独执行需要6min。现在10个程序同时在多道程序系统执行，一般情况下，每个程序执行完毕需要的时间（）。
//错选：小于等于60min
//答案：大于6min
//原因：
忽视了切换任务的开销；
没有读完整道题，说的是每个程序不是全部程序之和
//解析：在多道系统中，会频繁切换任务（task）。造成CPU的浪费，也增加了处理时间。所以平均每个都会大于6min；
//知识点：




//问题：采用动态重定位方式装入作业，在执行中允许（）将其移走。
//错选：操作系统无条件的
//答案：操作系统有条件的
//原因：“有条件”的含义模糊，内存的搬移紧凑有相应的条件
//解析：
动态重定位分区分配是 内存为程序分配空间的一种分配方式。 可以将内存块进行搬移，将小块拼成大块，将小空闲“紧凑”成大空闲，腾出较大的内存以容纳新的程序进程。可以减少“碎片”，当然这种条件是系统完成的，并不是用户。
//知识点：
首先介绍下动态重定位装入方式：
其运行环境：多道程序环境；
程序在运行过程中在内存的位置可能变动，装入程序把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正执行时才进行。说白了，动态重定位装入方式，是在程序执行时由CPU硬件进行地址重定位。
特点：程序在内存中可以浮动，不要求整个应用程序占用连续控件；为使地址转换不影响指令的执行速度，需要一个重定位寄存器的支持。

可重定位装入方式：
运行环境：多道程序环境
程序目标模块的起始地址通常是从0开始的，程序中的其他地址也都是相对于起始地址计算的；根据内存的当前情况，将装入模块装入到内幕才能的适当位子；地址变换通常是装入时一次完成的，以后不再改变，所以是静态重定位。
特点：无需硬件支持；程序不能在内存中移动；要求程序的存储空间是连续的，不能把程序放在若干不连续区域

绝对装入方式：
环境：使用单批道程序环境
绝对装入需要实现知道程序驻留在内存的位置，程序按照装入模块中的地址，将程序和数据装入内存。所以程序中的逻辑地址与实际地址完全相同，当操作系统吧程序装入内存时，不需要对程序和数据进行地址修改；
特点：是CPU执行目标代码块，由于内存大小的限制，能装入内存并执行的进程数大大减少。



//问题：系统中的“颠簸”是由（）引起的。
//错选：缺页率反馈模型不正确
//答案：缺页率高
//原因：“颠簸”===“抖动”===缺页率高
//解析：内存中的页面与外存频繁交换（即缺页率高），而产生的现象
//知识点：




//问题：从用户的观点看，操作系统是（ ）
//错选：控制和管理计算机资源的软件
//答案：用户与计算机之间的接口
//原因：从用户角度。题目要这样整也没法子
//解析：
//知识点：




//问题：目前对于大量数据存储来说，容量大，成本低，技术成熟，广泛使用的阶质是（）
//错选：磁盘
//答案：磁带
//原因：
//解析：
磁带：
1.单位容量成本低，磁盘每GB约2-3元，磁带每GB0.5元左右；
2.读写分离，运输方便，完美备份选择；
3.介质比磁盘稳定，保存期更长，磁盘保固期最多3-5年，磁带最长可达50年。
4.低能耗，低机房建设要求：磁盘耗电高，运行温度也高，而磁带机耗电低，根本不需要温控系统，为机房建设提供了更高的灵活性
//知识点：




//问题：下面有关线程的说法错误的是（）
//错选：少选
//答案：线程包含CPU现场，可以独立执行程序 每个线程有自己独立的地址空间
//原因：
//解析：
a 在多线程中，多个线程共享一个进程中的地址空间
b 线程不能独立执行程序
c 如果是在多处理器计算机中多个程序可以真正的并行执行，可以提高使用cpu的效率。
d 耗时的操作在线程中进行，因为这样并行计算可以防止主界面卡顿。（Android的UI操作）
//知识点：



//问题：以下那一些算法对执行时间短的进程有利（    ）
//错选：漏选时间片轮转法
//答案：时间片轮转法 高响应比优先调度算法
//原因：
//解析：
a 如果单个时间片长度大于短进程所需的运行时间的话，那么在单个时间片内，短进程就可以执行完；
使短进程的运行需要若干时间片，但使用时间片轮转算法来调度的话，也只需较少的时间片；
b 响应比优先调度算法是兼顾了短进程与等待时间长的进程的一种调度算法，每当调度作业的时候，都要计算各个进程的响应比，总是选择响应比高的进程运行
//知识点：
响应比 =（等待时间+要求服务时间）/ 要求服务时间,即RR=（w+s）/s=1+w/s，因此响应比一定是大于1的。
在通常情况下，优先运行短作业，当长进程等待时间足够长时，它也就变为可优先运行的进程了，从而克服了两者的缺点。


//问题： 二维数组X按行顺序存储，其中每个元素占1个存储单元。若X[4][4]的存储地址为Oxf8b82140,X[9][9]的存储地址为Oxf8b8221c,则X[7][7]的存储地址为()。
//错选：Oxf8b82198
//答案：Oxf8b821c4
//原因：把16进制加减法当成十进制
//解析：
假设每行有n个元素：
[9][9] - [4][4] = 21c-140=5n+5
[7][7] - [4][4]=x- 140 =3n+3
[7][7] = 140+3/5*（ 21c-140 ）= 1c4
//知识点：


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

//问答：
二进制地址为011011110000，大小为（4）10和（16）10块的伙伴地址分别为
伙伴系统：
地址被8整除，合并地址后的内存空间，即011011110000+100=即011011110100
地址不被32整除（被16整除，设计必须成立的情况）011011110000-10000=即011011100000
