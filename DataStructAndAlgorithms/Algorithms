//问题：某段文本中各个字母出现的频率分别是{a:4，b:3，o:12，h:7，i:10}，使用哈夫曼编码，则哪种是可能的编码：（）
//错选：a(0000)  b(0001)  h(001)  o(01)  i(1)
//答案：a(001)  b(000)  h(01)  i(10)  o(11)
//原因：错误理解哈夫曼树的构造
//解析：在构造过程，合成的新的节点未必是第一或第二小的节点，此时会产生多个根，但最终还是只有一个根
//知识点：
创建一个哈夫曼树：
a 原则如下：
1. 将每个英文字母依照出现频率由小排到大，最小在左，组成一个序列
2. 每个字母都代表一个终端节点（叶节点），比较每个字母的出现频率，将最小的两个字母频率相加合成一个新的节点，将两个字母从序列中删除，将生成的节点加入到字母队列中
3. 重复前面两步，直到序列中没有字母为止
进行编码：
b 1. 给霍夫曼树的所有左链结'0'与右链结'1'
2. 从树根至树叶依序记录所有字母的编码


//问题：同一进程下的线程可以共享以下？
//错选：无
//答案：data section（数据段）； file fd（文件描述符file description）
//原因：对英文单词不熟
//解析：
//知识点：
进程占有的资源：地址空间 ；全局变量；打开的文件；子进程；信号量；账户信息；数据段；线程优先级；代码段（code segment）
线程占有资源：栈（stack 实际上在地址空间中，可以访问，只是相比堆难，做题就看做私有）；
寄存器（register set）；状态；程序计数器 ；线程的信号屏蔽码；错误返回码；线程ID


//问题：对于派生类的构造函数，在定义对象时构造函数的执行顺序为？
1：（派生类）成员对象的构造函数
2：基类的构造函数
3：派生类本身的构造函数
//错选：123
//答案：213
//原因：
//解析：
若基类和派生类都有类成员（先造成员再造整个类；先析构整个类再析构成员）：
在定义派生类对象时，构造函数的执行顺序：基类成员对象构造函数->基类构造函数->派生类成员对象构造函数->派生类构造函数
在析构派生类对象时，析构函数的执行顺序：派生类的析构函数→派生类对象成员的析构函数→基类的析构函数->基类对象成员的析构函数
//知识点：



//问题：进程进入等待状态有哪几种方式？
//错选：未选
//答案：获得spinlock未果
//原因：忙等暂时理解为等待吧。存在四个概念：运行，就绪，等待，阻塞
//解析：忙等不等于阻塞。
a  高优先级的抢占CPU，使得原来处于运行状态的进程转变为就绪状态。
b 阻塞的进程等待某件事情的发生，一旦发生则它的运行条件已经满足，从阻塞进入就绪状态。
c 时间片轮转使得每个进程都有一小片时间来获得CPU运行，当时间片到时从运行状态变为就绪状态。
//知识点：
自旋锁（spinlock）是一种保护临界区最常见的技术。
在同一时刻只能有一个进程获得自旋锁，其他企图获得自旋锁的任何进程将一直进行尝试（即自旋，不断地测试变量），除此以外不能做任何事情。
因此没有获得自旋锁的进程在获取锁之前处于忙等。
 


//问题：设计模式中，属于结构型模式的有哪些？
//错选：空
//答案：装饰模式；代理模式
//原因：不会
//解析：
创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式
结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。
行为型模式：行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式
//知识点：
需要专门学习！！！

//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

 


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：



//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

 


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：



//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

 


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：



//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

 


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：



//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

 


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：



//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：

 


//问题：
//错选：
//答案：
//原因：
//解析：
//知识点：